# This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
version: 2.1
description: |
    Upload your coverage reports to Codecov without dealing with complex configurations. This orb helps you get coverage results quickly so that you can breathe easier and commit your code with confidence.
    If running on `alpine` builds, the orb will need `coreutils`, `curl`, and `gnupg` in order to validate.
display:
    home_url: https://codecov.io/
    source_url: https://github.com/codecov/codecov-circleci-orb
commands:
    upload:
        description: |
            Upload your coverage reports to Codecov without dealing with complex
            configurations. This orb helps you get coverage results quickly so that you
            can breathe easier and commit your code with confidence.

            If running on `alpine` builds, the orb will need `coreutils`, `curl`, and
            `gnupg` in order to validate.
        parameters:
            file:
                default: ""
                description: Path to the code coverage data file to upload.
                type: string
            flags:
                default: ""
                description: Flag the upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
                type: string
            token:
                default: CODECOV_TOKEN
                description: Set the private repository token as the value of the variable CODECOV_TOKEN using CircleCI Environment Variables.
                type: env_var_name
            upload_name:
                default: ${CIRCLE_BUILD_NUM}
                description: Custom defined name of the upload. Visible in Codecov UI
                type: string
            validate:
                default: true
                description: Validate the uploader before uploading the codecov result.
                type: boolean
            version:
                default: latest
                description: Which version of the Codecov Uploader to use (defaults to 'latest')
                type: string
            when:
                default: always
                description: When should this step run?
                type: string
            xtra_args:
                default: ""
                description: Any extra flags as provided by the bash uploader (e.g. `-v -Z`).
                type: string
        steps:
            - run:
                command: |
                    family=$(uname -s | tr '[:upper:]' '[:lower:]')
                    os="windows"
                    [[ $family == "darwin" ]] && os="macos"

                    [[ $family == "linux" ]] && os="linux"
                    [[ $os == "linux" ]] && \
                      osID=$(grep -e "^ID=" /etc/os-release | cut -c4-)
                    [[ $osID == "alpine" ]] && os="alpine"
                    echo "Detected ${os}"
                    echo "export os=${os}" >> $BASH_ENV
                    echo "export version=${PARAM_VERSION}" >> $BASH_ENV

                    filename="codecov"
                    [[ $os == "windows" ]] && filename+=".exe"
                    echo "export filename=${filename}" >> $BASH_ENV
                    [[ $os == "macos" ]] && \
                      HOMEBREW_NO_AUTO_UPDATE=1 brew install gpg
                    codecov_url="https://uploader.codecov.io"
                    codecov_url="$codecov_url/${PARAM_VERSION}"
                    codecov_url="$codecov_url/${os}/${filename}"
                    echo "Downloading ${codecov_url}"
                    curl -Os $codecov_url -v
                environment:
                    PARAM_VERSION: << parameters.version >>
                name: Download Codecov Uploader
            - when:
                condition: << parameters.validate >>
                steps:
                    - run:
                        command: |
                            source $BASH_ENV
                            echo "${CODECOV_PUBLIC_PGP_KEY}" | \
                              gpg --no-default-keyring --keyring trustedkeys.gpg --import
                            # One-time step
                            sha_url="https://uploader.codecov.io"
                            sha_url="$sha_url/${version}/${os}"
                            sha_url="$sha_url/${filename}.SHA256SUM"
                            echo "Downloading ${sha_url}"
                            curl -Os $sha_url
                            curl -Os $sha_url".sig"
                            gpgv $filename.SHA256SUM.sig $filename.SHA256SUM
                            shasum -a 256 -c $filename.SHA256SUM || \
                              sha256sum -c $filename.SHA256SUM
                        environment:
                            CODECOV_PUBLIC_PGP_KEY: |
                                -----BEGIN PGP PUBLIC KEY BLOCK-----

                                mQINBGCsMn0BEACiCKZOhkbhUjb+obvhH49p3ShjJzU5b/GqAXSDhRhdXUq7ZoGq
                                KEKCd7sQHrCf16Pi5UVacGIyE9hS93HwY15kMlLwM+lNeAeCglEscOjpCly1qUIr
                                sN1wjkd2cwDXS6zHBJTqJ7wSOiXbZfTAeKhd6DuLEpmA+Rz4Yc+4qZP+fVxVG3Pv
                                2v06m+E5CP/JQVQPO8HYi+S36hJImTh+zaDspu+VujSai5KzJ6YKmgwslVNIp5X5
                                GnEr2uAh5w6UTnt9UQUjFFliAvQ3lPLWzm7DWs6AP9hslYxSWzwbzVF5qbOIjUJL
                                KfoUpvCYDs2ObgRn8WUQO0ndkRCBIxhlF3HGGYWKQaCEsiom7lyi8VbAszmUCDjw
                                HdbQHFmm5yHLpTXJbg+iaxQzKnhWVXzye5/x92IJmJswW81Ky346VxYdC1XFL/+Y
                                zBaj9oMmV7WfRpdch09Gf4TgosMzWf3NjJbtKE5xkaghJckIgxwzcrRmF/RmCJue
                                IMqZ8A5qUUlK7NBzj51xmAQ4BtkUa2bcCBRV/vP+rk9wcBWz2LiaW+7Mwlfr/C/Q
                                Swvv/JW2LsQ4iWc1BY7m7ksn9dcdypEq/1JbIzVLCRDG7pbMj9yLgYmhe5TtjOM3
                                ygk25584EhXSgUA3MZw+DIqhbHQBYgrKndTr2N/wuBQY62zZg1YGQByD4QARAQAB
                                tEpDb2RlY292IFVwbG9hZGVyIChDb2RlY292IFVwbG9hZGVyIFZlcmlmaWNhdGlv
                                biBLZXkpIDxzZWN1cml0eUBjb2RlY292LmlvPokCTgQTAQoAOBYhBCcDTn/bhQ4L
                                vCxi/4Brsortd5hpBQJgrDJ9AhsDBQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJ
                                EIBrsortd5hpxLMP/3Fbgx5EG7zUUOqPZ+Ya9z8JlZFIkh3FxYMfMFE8jH9Es26F
                                V2ZTJLO259MxM+5N0XzObi3h4XqIzBn42pDRfwtojY5wl2STJ9Bzu+ykPog7OB1u
                                yfWXDRKcqPTUIxI1/WdU+c0/WNE6wjyzK+lRc1YUlp4pdNU7l+j2vKN+jGi2b6nV
                                PTPRsMcwy3B90fKf5h2wNMNqO+KX/rjgpG9Uhej+xyFWkGM1tZDQQYFj+ugQUj61
                                BMsQrUmxOnaVVnix21cHnACDCaxqgQZH3iZyEOKPNMsRFRP+0fLEnUMP+DVnQE6J
                                Brk1Z+XhtjGI9PISQVx5KKDKscreS/D5ae2Cw/FUlQMf57kir6mkbZVhz2khtccz
                                atD0r59WomNywIDyk1QfAKV0+O0WeJg8A69/Jk6yegsrUb5qEfkih/I38vvI0OVL
                                BYve/mQIHuQo5ziBptNytCrN5TXHXzguX9GOW1V1+3DR+w/vXcnz67sjlYDysf1f
                                JUZv9edZ2RGKW7agbrgOw2hB+zuWZ10tjoEcsaSGOLtKRGFDfmu/dBxzl8yopUpa
                                Tn79QKOieleRm5+uCcKCPTeKV0GbhDntCZJ+Yiw6ZPmrpcjDowAoMQ9kiMVa10+Q
                                WwwoaRWuqhf+dL6Q2OLFOxlyCDKVSyW0YF4Vrf3fKGyxKJmszAL+NS1mVcdxuQIN
                                BGCsMn0BEADLrIesbpfdAfWRvUFDN+PoRfa0ROwa/JOMhEgVsowQuk9No8yRva/X
                                VyiA6oCq6na7IvZXMxT7di4FWDjDtw5xHjbtFg336IJTGBcnzm7WIsjvyyw8kKfB
                                8cvG7D2OkzAUF8SVXLarJ1zdBP/Dr1Nz6F/gJsx5+BM8wGHEz4DsdMRV7ZMTVh6b
                                PaGuPZysPjSEw62R8MFJ1fSyDGCKJYwMQ/sKFzseNaY/kZVR5lq0dmhiYjNVQeG9
                                HJ6ZCGSGT5PKNOwx/UEkT6jhvzWgfr2eFVGJTcdwSLEgIrJIDzP7myHGxuOiuCmJ
                                ENgL1f7mzGkJ/hYXq1RWqsn1Fh2I9KZMHggqu4a+s3RiscmNcbIlIhJLXoE1bxZ/
                                TfYZ9Aod6Bd5TsSMTZNwV2am9zelhDiFF60FWww/5nEbhm/X4suC9W86qWBxs3Kh
                                vk1dxhElRjtgwUEHA5OFOO48ERHfR7COH719D/YmqLU3EybBgJbGoC/yjlGJxv0R
                                kOMAiG2FneNKEZZihReh8A5Jt6jYrSoHFRwL6oJIZfLezB7Rdajx1uH7uYcUyIaE
                                SiDWlkDw/IFM315NYFA8c1TCSIfnabUYaAxSLNFRmXnt+GQpm44qAK1x8EGhY633
                                e5B4FWorIXx0tTmsVM4rkQ6IgAodeywKG+c2Ikd+5dQLFmb7dW/6CwARAQABiQI2
                                BBgBCgAgFiEEJwNOf9uFDgu8LGL/gGuyiu13mGkFAmCsMn0CGwwACgkQgGuyiu13
                                mGkYWxAAkzF64SVpYvY9nY/QSYikL8UHlyyqirs6eFZ3Mj9lMRpHM2Spn9a3c701
                                0Ge4wDbRP2oftCyPP+p9pdUA77ifMTlRcoMYX8oXAuyE5RT2emBDiWvSR6hQQ8bZ
                                WFNXal+bUPpaRiruCCUPD2b8Od1ftzLqbYOosxr/m5Du0uahgOuGw6zlGBJCVOo7
                                UB2Y++oZ8P7oDGF722opepWQ+bl2a6TRMLNWWlj4UANknyjlhyZZ7PKhWLjoC6MU
                                dAKcwQUdp+XYLc/3b00bvgju0e99QgHZMX2fN3d3ktdN5Q2fqiAi5R6BmCCO4ISF
                                o5j10gGU/sdqGHvNhv5C21ibun7HEzMtxBhnhGmytfBJzrsj7GOReePsfTLoCoUq
                                dFMOAVUDciVfRtL2m8cv42ZJOXtPfDjsFOf8AKJk40/tc8mMMqZP7RVBr9RWOoq5
                                y9D37NfI6UB8rPZ6qs0a1Vfm8lIh2/k1AFECduXgftMDTsmmXOgXXS37HukGW7AL
                                QKWiWJQF/XopkXwkyAYpyuyRMZ77oF7nuqLFnl5VVEiRo0Fwu45erebc6ccSwYZU
                                8pmeSx7s0aJtxCZPSZEKZ3mn0BXOR32Cgs48CjzFWf6PKucTwOy/YO0/4Gt/upNJ
                                3DyeINcYcKyD08DEIF9f5tLyoiD4xz+N23ltTBoMPyv4f3X/wCQ=
                                =ch7z
                                -----END PGP PUBLIC KEY BLOCK-----
                        name: Validate Codecov Uploader
            - run:
                command: |
                    unset NODE_OPTIONS
                    # See https://github.com/codecov/uploader/issues/475
                    source $BASH_ENV
                    chmod +x $filename
                    [ -n "${PARAM_FILE}" ] && \
                      set - "${@}" "-f" "${PARAM_FILE}"
                    [ -n "${PARAM_XTRA_ARGS}" ] && \
                      set - "${@}" "${PARAM_XTRA_ARGS}"
                    # alpine doesn't allow for indirect expansion
                    ./"$filename" \
                      -Q "codecov-circleci-orb-3.2.4" \
                      -t "$(eval echo \$$PARAM_TOKEN)" \
                      -n "${PARAM_UPLOAD_NAME}" \
                      -F "${PARAM_FLAGS}" \
                      ${@}
                environment:
                    PARAM_FILE: << parameters.file >>
                    PARAM_FLAGS: << parameters.flags >>
                    PARAM_TOKEN: << parameters.token >>
                    PARAM_UPLOAD_NAME: << parameters.upload_name >>
                    PARAM_XTRA_ARGS: << parameters.xtra_args >>
                name: Upload Coverage Results
examples:
    basic_upload:
        description: |
            Upload coverage with Codecov Create a simple flow to upload coverage reports to Codecov
        usage:
            version: "2.1"
            orbs:
                codecov: codecov/codecov@3.2.3
            workflows:
                upload-to-codecov:
                    jobs:
                        - checkout
                        - codecov/upload
    node_test_upload:
        description: |
            Upload coverage with Codecov Create a simple flow to upload coverage reports to Codecov and use CircleCI's node/test job
        usage:
            version: "2.1"
            orbs:
                codecov: codecov/codecov@3.2.3
                node: circleci/node@4.7.0
            workflows:
                upload-to-codecov:
                    jobs:
                        - node/test:
                            post-steps:
                                - codecov/upload
jobs:
  build:
    docker:
      - image: node:11.10.1

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run: npm run test

      - run: npm run test:coverage

      - codecov/upload:
          file: './coverage/clover.xml'

      - run: npm run build

